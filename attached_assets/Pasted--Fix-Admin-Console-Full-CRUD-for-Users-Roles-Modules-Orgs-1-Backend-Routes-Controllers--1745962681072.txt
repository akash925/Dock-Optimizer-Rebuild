# Fix Admin Console: Full CRUD for Users, Roles, Modules & Orgs

## 1) Backend Routes & Controllers

### Users
1. **GET /admin/users**  
   - Return all users with their org memberships and roles:  
     ```js
     SELECT u.id, u.email, u.first_name, u.last_name,
            json_agg(json_build_object(
              'orgId', ou.organization_id,
              'orgName', t.name,
              'roleName', r.name
            )) AS memberships
     FROM users u
     LEFT JOIN organization_users ou ON ou.user_id = u.id
     LEFT JOIN tenants t ON t.id = ou.organization_id
     LEFT JOIN roles r ON r.id = ou.role_id
     GROUP BY u.id;
     ```
2. **POST /admin/users**  
   - Create new user (`email, password, firstName, lastName`) then return its ID.
3. **PUT /admin/users/:userId/orgs**  
   - Body `{ orgId, roleName, action: 'add'|'remove' }`  
   - On `add`: look up `roleId` by `roleName`, then insert into `organization_users`.  
   - On `remove`: delete from `organization_users` where `userId` & `orgId`.

### Organizations
1. **GET /admin/orgs**  
   - Return all orgs: `id, name, status, subdomain, createdAt, userCount, moduleCount`.
2. **POST /admin/orgs**  
   - Body `{ name, subdomain }` → insert into `tenants`, return new org.
3. **GET /admin/orgs/:orgId/detail**  
   - Return org metadata + `users` array + `modules` array.
4. **PUT /admin/orgs/:orgId/modules**  
   - Body `{ moduleName, enabled }` → upsert into `organization_modules` table.

## 2) Frontend Pages & API Calls

### Global Users List (`/admin/users`)
- **Fetch** with `useQuery('users', api.admin.getUsers)` calling GET `/admin/users`.
- **Render** table columns: Email, Name, “Organizations & Roles” (comma list), “Edit” button.
- **“Add User”** button → modal with form:
  - Fields: Email, First Name, Last Name, Password, Role (dropdown from `GET /admin/settings/roles`), Organization (dropdown from `GET /admin/orgs`).
  - On submit: call POST `/admin/users`, then call PUT `/admin/users/:id/orgs?action=add`.
  - Invalidate `['users']` & `['orgs']`.

### Edit User (`/admin/users/[userId]`)
- **Fetch** user detail via GET `/admin/users/:userId` (or from global users list).
- **“Memberships”** table: Org Name, Role badge, “Remove” icon calling PUT `/admin/users/:userId/orgs?action=remove`.
- **“Add to Organization”** modal same as above.

### Organizations List (`/admin/orgs`)
- **Fetch** via `useQuery('orgs', api.admin.getOrgs)` calling GET `/admin/orgs`.
- **Render** table columns: Name, Subdomain, Status, #Users, #Modules, “Edit” button.
- **“New Organization”** button → modal form for `name` & `subdomain`, POST `/admin/orgs`, invalidate `['orgs']`.

### Edit Organization (`/admin/orgs/[orgId]`)
- **Fetch** via GET `/admin/orgs/:orgId/detail`.
- **Tabs**: Users, Modules.
- **Users Tab**:  
  - Table of current members with Role, “Remove” icon.  
  - “Add User” modal: dropdown of all users (`GET /admin/users`), dropdown of roles (`GET /admin/settings/roles`), on submit call PUT `/admin/users/:userId/orgs?action=add`.
- **Modules Tab**:  
  - List `modules` from orgDetail; each line shows `moduleName` + `<Switch>` bound to:
    ```js
    onChange={(enabled) => {
      await api.admin.updateOrgModules(orgId, { moduleName, enabled });
      queryClient.invalidateQueries(['orgDetail', orgId]);
    }}
    ```

## 3) Wire Up API Client

- In `client/src/api/admin.ts`, implement:
  ```ts
  getUsers = () => axios.get('/admin/users');
  createUser = (data) => axios.post('/admin/users', data);
  updateUserOrgs = (userId, body) => axios.put(`/admin/users/${userId}/orgs`, body);

  getOrgs = () => axios.get('/admin/orgs');
  createOrg = (data) => axios.post('/admin/orgs', data);
  getOrgDetail = (orgId) => axios.get(`/admin/orgs/${orgId}/detail`);
  updateOrgModules = (orgId, body) => axios.put(`/admin/orgs/${orgId}/modules`, body);

  getRoles = () => axios.get('/admin/settings/roles');
