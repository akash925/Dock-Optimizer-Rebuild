Thank you for successfully refactoring the `POST /api/schedules` endpoint with the database transaction and the call to `calculateAvailabilitySlots`. The implementation for that endpoint looks correct.

Now, please apply the **exact same pattern** to the following remaining booking creation endpoints in `server/routes.ts`:

1.  **For `POST /api/schedules/external`:**
    * Ensure the entire core logic (the existing call to `calculateAvailabilitySlots` AND the subsequent `storage.createSchedule(...)`) is wrapped in `await db.transaction(async (tx) => { ... });`.
    * Correct the HTTP status code in the `catch` block for `SLOT_UNAVAILABLE` errors from `400` to `409 Conflict`.

2.  **For `POST /api/booking-pages/:slug/book` (and its likely duplicate handler `POST /api/booking-pages/book-appointment` if it exists as a separate code block):**
    * **Remove the old embedded availability check logic completely.**
    * **Implement the full pattern from `POST /api/schedules`**:
        * Determine `effectiveTenantId` (likely from `bookingPage.tenantId`).
        * Extract/derive `date` (YYYY-MM-DD string), `facilityId`, `appointmentTypeId`, and `requestedStartTimeStr` (HH:MM) from `req.body`.
        * Wrap the following in `await db.transaction(async (tx) => { ... });`:
            * Call `calculateAvailabilitySlots(...)` (imported from `./src/services/availability` or `./services/availabilityService` - please ensure consistent import path) using the main `db` instance, `storage`, and the prepared parameters.
            * Find the specific slot matching `requestedStartTimeStr`.
            * If `!requestedSlot || !requestedSlot.available || requestedSlot.remainingCapacity <= 0`, then `throw new Error('SLOT_UNAVAILABLE')`.
            * If available, proceed with the existing logic to prepare `appointmentData` and call `storage.createAppointment(appointmentData)` (or the relevant creation method for this route).
        * Ensure the route's main `catch` block specifically handles `err.message === 'SLOT_UNAVAILABLE'` by returning a `409 Conflict` and a user-friendly message.

3.  **For `POST /api/external-booking` (Legacy Endpoint):**
    * Apply the same new pattern (as detailed for `/api/booking-pages/:slug/book` above):
        * Remove any old/minimal availability checks.
        * Determine `effectiveTenantId` (this might need careful handling, potentially deriving from `validatedData.location` by fetching the facility and then its tenant. If a reliable tenant cannot be established, log this, but proceed if public booking is intended).
        * Extract/derive necessary parameters for `calculateAvailabilitySlots`.
        * Wrap in `db.transaction`.
        * Call `calculateAvailabilitySlots`, check the specific slot, throw `SLOT_UNAVAILABLE` if needed.
        * Proceed with `storage.createSchedule`.
        * Handle `409 Conflict` for `SLOT_UNAVAILABLE`.

**Output:**
Please provide the updated `server/routes.ts` file with these changes consistently applied to `POST /api/schedules/external`, `POST /api/booking-pages/:slug/book`, `POST /api/booking-pages/book-appointment` (if distinct), and `POST /api/external-booking`.