We need to fix our Admin Console so the global “Users” list and the “Add User to Organization” modal both load the real user array instead of calling the wrong endpoint.

1. **Update the admin API client** (`client/src/api/admin.ts`):
   - Replace any calls to `/api/user` with `/api/admin/users?page=1&limit=100`
   - Unwrap the array from the response. For example, if the backend returns `{ users: […], count }`, do:
     ```ts
     export const getUsers = () =>
       axios.get('/api/admin/users?page=1&limit=100')
            .then(res => res.data.users)
     ```
   - Also fix `getAllRoles` to call `/api/admin/roles` and return `res.data.roles`, and `getOrgs` to call `/api/admin/orgs?page=1&limit=20` returning `res.data.orgs`.

2. **Wire that array into the Global Users page** (`client/src/pages/admin/users.tsx`):
   - Change your React Query hook to:
     ```ts
     const { data: users = [], isLoading } = useQuery('adminUsers', api.admin.getUsers)
     ```
   - Remove any fallback to `api.user.getCurrent()`.
   - Use `users.filter(...)` directly to implement search by email/firstName/lastName.

3. **Fix the “Add User to Organization” modal** (`client/src/pages/admin/orgs/[orgId].tsx`):
   - Replace its call to the current-user endpoint with the new `api.admin.getUsers()`:
     ```ts
     const { data: allUsers = [] } = useQuery('adminUsers', () => api.admin.getUsers())
     ```
   - Map `allUsers` into `<SelectItem>` options so you can pick any user.

4. **Invalidate & refetch after changes**:
   - After adding/removing a user or changing roles, call:
     ```ts
     queryClient.invalidateQueries('adminUsers')
     queryClient.invalidateQueries(['orgDetail', orgId])
     ```

Once you make these changes, reload the Admin Console.  
- You should see all seeded users in the global list.  
- Search/filter should work immediately.  
- The “Add User to Organization” dropdown will show the same users.  
- Assigning or removing users and roles will persist and refresh correctly.  
