Thank you, this version of `server/src/services/availability.test.ts` is much better, especially the core mocking strategy!

I've reviewed it and the test output you provided where all 16 tests passed. This implies that my actual `calculateAvailabilitySlots` function in `server/src/services/availability.ts` might have been updated to accept an optional `options?: { testAppointments?: YourAppointmentType[] }` parameter to bypass the database call for testing, which is a valid approach.

Please make one final correction to the test `it('enforces tenant isolation when fetching relevant appointments', ...)` in `server/src/services/availability.test.ts`:

1.  **Correct the `vi.mock` for `WorkspaceRelevantAppointmentsForDay`:**
    * The function signature for the mocked `WorkspaceRelevantAppointmentsForDay` inside `vi.mock('./availability', ...)` (currently on Source: 1, line 26 `async (db: any, facilityId: number, date: string, effectiveTenantId: number)`) needs to match the *actual* parameters that `calculateAvailabilitySlots` would pass to it when the `testAppointments` option is *not* used.
    * The actual `WorkspaceRelevantAppointmentsForDay` in `availability.ts` expects `(db: DrizzleDBInstance, facilityId: number, dayStart: Date, dayEnd: Date, effectiveTenantId: number)`.
    * Please update the mocked function signature inside `vi.mock` to expect `dayStart: Date` and `dayEnd: Date` instead of `date: string`. The call to the global `mockedFetchRelevantAppointmentsForDay` inside it should also reflect this.

2.  **Correct the `toHaveBeenCalledWith` Assertion:**
    * In that same test, the assertion `expect(fetchRelevantAppointmentsForDay as vi.Mock).toHaveBeenCalledWith(...)` needs to expect `dayStartForMock` and `dayEndForMock` (which are already correctly calculated as Date objects in that test) as the third and fourth arguments respectively, not the `date` string.
    * The current assertion is (Source: 1, lines 631-637):
        ```typescript
        expect(fetchRelevantAppointmentsForDay as vi.Mock).toHaveBeenCalledWith(
          mockDb,
          "2025-05-07", // This needs to be dayStartForMock
          7,           // This should be facilityId
          5,           // This should be dayEndForMock (ERROR: this is currently tenantId)
                       // And tenantId should be the 5th argument
        );
        ```
    * It should be corrected to:
        ```typescript
        expect(fetchRelevantAppointmentsForDay as vi.Mock).toHaveBeenCalledWith(
          mockDb,
          facilityId,     // facilityId (which is 7 in the test)
          dayStartForMock, // Date object
          dayEndForMock,   // Date object
          tenantId        // effectiveTenantId (which is 5 in the test)
        );
        ```
    * Also, update the subsequent parameter checking (Source: 1, lines 639-643) to match this correct order: `actualDb = mockCalls[0]`, `actualFacilityId = mockCalls[1]`, `actualDayStart = mockCalls[2]`, `actualDayEnd = mockCalls[3]`, `actualTenantId = mockCalls[4]`. And then the assertions for these variables.

**Output:**
Please provide the **complete and final version of `server/src/services/availability.test.ts`** after applying these specific corrections to the tenant isolation test and the `vi.mock` signature for `WorkspaceRelevantAppointmentsForDay`.