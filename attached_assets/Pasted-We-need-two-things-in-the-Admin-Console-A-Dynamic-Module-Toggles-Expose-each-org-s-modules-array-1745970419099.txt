We need two things in the Admin Console:

A) Dynamic Module Toggles

Expose each org’s modules array in your Auth or OrganizationContext (so every page knows which are enabled).

Sidebar / Top-nav (Nav.tsx or AdminTopNav.tsx): build your list of links from a static config with a module key, then filter:

tsx
Copy
Edit
const navItems = [
  { name: 'Overview', path: '/overview', module: null },
  { name: 'Calendar', path: '/calendar', module: 'calendar' },
  { name: 'Asset Manager', path: '/assetManager', module: 'assetManager' },
  // …
];
return (
  <nav>
    {navItems.map(item =>
      !item.module || enabledModules.includes(item.module)
        ? <NavLink key={item.path} to={item.path}>{item.name}</NavLink>
        : null
    )}
  </nav>
);
Routes (App.tsx): same pattern—register <Route> only if !r.module || enabledModules.includes(r.module).

Remove any “Not Authorized” guards or blank pages for disabled modules—they simply aren’t registered.

Test:

Disable “Asset Manager” in Admin → Org → Modules → Save → verify link disappears and /asset-manager 404’s or redirects.

Re-enable → link returns and route works.

Repeat for Calendar, Email, Booking Pages, etc.

B) Fix Infinite-Loop “Maximum update depth exceeded”

Find any useEffect in your layout or nav that calls setState without a proper dependency array (or on a value that always changes).

Ensure every useEffect(() => { … }, [deps]) lists exactly the values it reads.

Memoize context values so they don’t change identity each render:

tsx
Copy
Edit
// In AuthProvider or OrgContext
const modulesValue = useMemo(() => ({ modules }), [modules]);
return <OrgContext.Provider value={modulesValue}>…</OrgContext.Provider>;
Guard state updates inside effects:

tsx
Copy
Edit
useEffect(() => {
  if (prevModulesRef.current !== modules) {
    setLocalModules(modules);
    prevModulesRef.current = modules;
  }
}, [modules]);
Remove any hook that does useState→setState on every render or no‐deps effects.

Verify you no longer get “Maximum update depth” in DevTools when you load the Admin pages as testadmin.

Deliverables

Updated Nav.tsx / AdminTopNav.tsx showing dynamic links.

Updated App.tsx showing dynamic <Route> registration.

Fixed useEffect hooks with proper [deps] or removal of no‐deps loops.

Context/provider code memoizing the modules array.

Screenshots proving modules disappear/reappear and no infinite-loop errors.

If you still see any disabled module live or get the infinite-loop warning, share your updated useEffect code, the context/provider snippet, and the filtered navItems array so I can debug further.

