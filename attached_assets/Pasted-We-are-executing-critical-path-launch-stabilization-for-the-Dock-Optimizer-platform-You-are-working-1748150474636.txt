We are executing critical-path launch stabilization for the Dock Optimizer platform. You are working in a production-grade, multi-tenant TypeScript monorepo using React (ShadCN), Express, PostgreSQL (Drizzle ORM), WebSockets, and Zod for validation.

Do not create new files unless absolutely necessary. Avoid introducing duplicate middleware, schemas, or handlers. Operate with precision, and always assume existing structure should be extended, not replaced. When unsure, add an inline TODO and proceed.

‚úÖ TASKS (Do in Parallel If Possible)
1. üîå Fix Missing WebSocket Broadcast for Schedule Creation
Ensure POST /api/schedules calls app.locals.broadcastScheduleUpdate(schedule)

If it's already implemented, confirm schedule.created messages follow this payload format:

ts
Copy
Edit
{
  type: "schedule.created",
  payload: { scheduleId, tenantId, dockId, time }
}
WebSocket message must be tenant-isolated. Use authenticated connections only.

2. üîí Add Zod Validation to Vulnerable Endpoints
Add server-side Zod validation middleware to these endpoints (if missing):

POST /api/booking-pages/book/:slug

POST /api/booking-pages/book-appointment

POST /api/appointments/:id/resend-email

POST /api/bol-upload/link

POST /api/bol-upload/upload

PATCH /api/schedules/:id/check-in

PATCH /api/schedules/:id/check-out

Use shared/schema.ts or drizzle/schema/bol.ts schemas. If missing, define in-place or reuse existing insert schemas with .superRefine() for cross-field logic.

Ensure validation middleware fails requests with structured 400 errors on schema mismatch. Log failures to console with:

ts
Copy
Edit
console.warn("Validation failed:", error)
3. üß™ CI Setup
Create .github/workflows/test.yml:

yaml
Copy
Edit
name: Dock Optimizer Tests
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm ci
      - run: node test/test-checker.js
      - run: node run-launch-verification.js
Ensure test scripts (run-launch-verification.js, test-checker.js) run without fatal errors. Do not generate new test scripts unless explicitly needed.

4. üìà Introduce Redis Cache for Availability API
Check if Redis (REDIS_URL) is already configured.

Wrap /api/availability calculation logic in Redis caching layer:

Key format: availability:${tenantId}:${facilityId}:${date}:${appointmentTypeId}

TTL: 120 seconds

Invalidate key on POST /api/schedules or PUT /api/schedules/:id

Use only existing Redis config or add lib/redis.ts if none exists.

‚õîÔ∏è Do NOT:

Create duplicate schema or middleware files

Leave incomplete scaffolding or placeholders

Skip tenantId isolation checks on protected endpoints

‚è± Work quickly, but verify all changes using grep, diff, or logs. Treat all endpoints and client updates as multi-tenant and security-critical.

Once tasks are complete, output a summary with:

Which endpoints were updated

Any new middleware added

Confirmed WebSocket behavior

Test run results

