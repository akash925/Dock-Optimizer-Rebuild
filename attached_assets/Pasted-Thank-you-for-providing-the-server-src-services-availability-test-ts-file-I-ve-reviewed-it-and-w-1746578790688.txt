Thank you for providing the `server/src/services/availability.test.ts` file.
I've reviewed it, and we need to adjust the mocking strategy to ensure we are testing the *actual* `calculateAvailabilitySlots` function from `./availability.ts` and not a custom implementation within the test file's mock.

**Current Issue:**
The `vi.mock('./availability', ...)` block currently re-implements `calculateAvailabilitySlots` (as `customCalculateAvailabilitySlots`) and exports that mocked version. This means the tests are not running against the real service code.

**Required Corrections to `server/src/services/availability.test.ts`:**

1.  **Modify the `vi.mock` block:**
    * The `vi.mock('./availability', ...)` should ONLY mock `WorkspaceRelevantAppointmentsForDay`.
    * It should allow the *original* `calculateAvailabilitySlots` function to be imported and used by the tests.
    * A correct way to do this is to import the original module, spread its contents, and then specifically override `WorkspaceRelevantAppointmentsForDay`.

    Change the mock block (currently lines 15-212 in the provided file) to something like this:

    ```typescript
    // Import the functions from the actual module FIRST
    import { calculateAvailabilitySlots as actualCalculateAvailabilitySlots, fetchRelevantAppointmentsForDay as originalFetchRelevantAppointmentsForDay } from './availability';

    // Now, mock the module to replace only fetchRelevantAppointmentsForDay
    vi.mock('./availability', async (importOriginal) => {
      const actualModule = await importOriginal(); // Gets the original module
      return {
        ...(actualModule as any), // Spread all exports from the original module
        fetchRelevantAppointmentsForDay: vi.fn(), // This is the function we want to mock
      };
    });

    // Import the mocked version of fetchRelevantAppointmentsForDay for use in tests
    // Note: calculateAvailabilitySlots imported at the top is the REAL one.
    import { fetchRelevantAppointmentsForDay } from './availability';
    const mockedFetchRelevantAppointmentsForDay = fetchRelevantAppointmentsForDay as vi.Mock;
    ```
    *Place the `import { calculateAvailabilitySlots ... } from './availability';` (for the *real* function) at the very top of your test file with other imports.*
    *The `mockedFetchRelevantAppointmentsForDay` variable can then be used in your tests to set up `mockResolvedValue` etc.*

2.  **Remove `customCalculateAvailabilitySlots`:**
    * Delete the entire `customCalculateAvailabilitySlots` function definition (currently lines 25-206 in the provided file) from the `vi.mock` block.

3.  **Ensure Tests Use Real and Mocked Functions Correctly:**
    * All test calls to `await calculateAvailabilitySlots(...)` should now execute your *actual* service logic from `server/src/services/availability.ts`.
    * This actual service logic will internally call `WorkspaceRelevantAppointmentsForDay`, which will be the version mocked by `vi.mock` (and controllable via `mockedFetchRelevantAppointmentsForDay`).
    * Ensure all tests now use `mockedFetchRelevantAppointmentsForDay.mockResolvedValue(...)` to set up the return values for the dependency.

4.  **Parameter Order for `mockedFetchRelevantAppointmentsForDay`:**
    * In your `customCalculateAvailabilitySlots`, the call was:
        `await mockFetchRelevantAppointmentsForDay(db, date, facilityId, effectiveTenantId)`
    * The `WorkspaceRelevantAppointmentsForDay` function in your *actual* `availability.ts` (from previous versions) expects:
        `(db: DrizzleDBInstance, facilityId: number, dayStart: Date, dayEnd: Date, effectiveTenantId: number)`
    * Ensure the mock setup in each test using `mockedFetchRelevantAppointmentsForDay.mockResolvedValue(...)` aligns with what the *real* `calculateAvailabilitySlots` will pass to the *mocked* `WorkspaceRelevantAppointmentsForDay` (i.e., `dayStart` and `dayEnd` as `Date` objects).
    * The tenant isolation test's `toHaveBeenCalledWith` assertion needs to reflect these `Date` objects for `dayStart` and `dayEnd`.

**Output:**
Please provide the **complete, updated `server/src/services/availability.test.ts` file** after applying these fundamental corrections to the mocking strategy. The goal is to test the REAL `calculateAvailabilitySlots` function.