Build an Admin Console where a super-admin can:

Log in with a master “Admin” account.

View all Organizations (tenants) in a paginated list.

Drill into each Organization to:

See its assigned Users (with their roles: Admin, User, etc.)

See its enabled Modules (Appointments, Calendar, Assets, Notifications, Analytics, etc.)

Edit:

Assign/Revoke Users to/from the Org—with role selection.

Toggle Modules on/off for that Org.

High-Level Tasks:

1. Database & Migrations
Add a roles table (id, name: [“admin”, “user”], description).

Add join tables:

organization_users (org_id, user_id, role_id, created_at)

organization_modules (org_id, module_name, enabled:boolean, created_at)

Write and run migrations to create these tables and foreign-key constraints.

2. Seed Master Admin
In your seed script (or a one-off script), create:

A user with email admin@yourdomain.com and role super-admin.

A default Organization “Global Admin” (or similar) linked to that user.

Ensure password is set via env var or prompt.

3. Server (Backend) Endpoints
Auth:

Extend POST /auth/login to recognize super-admin vs. tenant-admin vs. regular user.

Organizations (CRUD):

GET /admin/orgs → list all orgs

GET /admin/orgs/:orgId → org detail (users + modules)

POST /admin/orgs / PUT /admin/orgs/:orgId / DELETE /admin/orgs/:orgId

Org-Users:

POST /admin/orgs/:orgId/users { userId, roleId }

DELETE /admin/orgs/:orgId/users/:userId

Org-Modules:

GET /admin/orgs/:orgId/modules

PUT /admin/orgs/:orgId/modules { moduleName, enabled }

All these endpoints should enforce that only super-admin (or org-admin for their own org) can call them.

4. Frontend (Admin Console UI)
Route: /admin (protected, super-admin only).

Layout: Sidebar with “Organizations”, “Users”, “Modules” links.

Orgs List Page (/admin/orgs):

Table: Org Name, Created Date, #Users, #Modules enabled, “Edit” button.

Org Detail Page (/admin/orgs/:orgId):

Users Table: Name, Email, Role, “Remove”

“Add User” button that opens a modal to search/select from all users + role dropdown.

Modules Table: Module Name, Toggle switch for Enabled/Disabled.

“Save Changes” button to batch-update modules.

Global Users Page (/admin/users):

(Optional) List of all users across orgs, with link to see which Orgs they belong to.

5. State & API Integration
Use your existing React Context (or Redux/Zustand) for:

Current admin’s auth + role.

Fetching and caching /admin/orgs, /admin/orgs/:id, etc.

Show spinners or disabled states during API calls.

6. QA & Acceptance
Login as master admin → you see the /admin console.

Orgs List loads all tenants.

Edit an org:

You can add/remove users and pick roles.

You can toggle modules on/off and hit “Save,” then reflect immediately.

If you log in as a tenant-admin (role=admin on Org X), you should only see that one org’s detail page, not the full list.

Verify that bookings and other feature modules appear or disappear in the main app based on the org’s enabled modules.

