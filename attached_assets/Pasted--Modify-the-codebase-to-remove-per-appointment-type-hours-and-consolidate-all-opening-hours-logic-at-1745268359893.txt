“Modify the codebase to remove per‑appointment‑type hours and consolidate all opening‑hours logic at the facility level.

Database migration

In prisma/migrations/* (or your ORM migration folder), drop the columns on appointment_type that store hours (e.g. hours, breaks, start_time, end_time, etc.).

Add a new boolean column override_facility_hours (default false).

Write a one‑off data migration: for any appointment_type with existing custom hours, set override_facility_hours = true.

Backend model & API

In server/src/models/appointmentType.ts (or equivalent), remove all fields related to per‑type hours; add overrideFacilityHours: boolean.

In server/src/controllers/appointmentTypeController.ts:

Remove endpoints or request fields that read/write hours.

Ensure GET /api/appointment-types now returns:

ts
Copy
Edit
{
  id: number;
  name: string;
  facilityId: number;
  duration: number;
  maxConcurrent: number;
  gracePeriod: number;
  bufferTime: number;
  overrideFacilityHours: boolean;
  timezone: string;
  // …other existing flags
}
In validation schemas, drop hours/range schemas; add validation for the new boolean flag.

Frontend Appointment Master UI

In client/src/components/appointment-master/AppointmentMasterForm.tsx (or wherever you edit appointment types):

Remove the entire “Availability Rules” or “Scheduling Settings” panel that had date/time pickers.

Replace it with a toggle field:

jsx
Copy
Edit
<FormField name="overrideFacilityHours" control={form.control}>
  <FormItem>
    <FormLabel>Override facility hours?</FormLabel>
    <FormDescription>
      When enabled, this type can be scheduled outside normal facility hours.
    </FormDescription>
    <Switch
      checked={field.value}
      onCheckedChange={field.onChange}
    />
  </FormItem>
</FormField>
Keep the existing inputs for maxConcurrent, gracePeriod, bufferTime, timezone.

Backend booking logic & slot generation

In server/src/lib/appointment-availability.ts (or where slots are generated for /api/availability):

Change the filter to only apply facility hours rules; ignore per‑type hours unless overrideFacilityHours === true.

Pseudocode:

ts
Copy
Edit
const facilityRules = await fetchFacilityHours(facilityId);
const useHours = appointmentType.overrideFacilityHours ? fullDay : facilityRules;
// then generateAvailableTimeSlots(date, useHours, …);
End‑to‑end smoke test

Edit an appointment type so that overrideFacilityHours = false → booking only shows slots within facility hours.

Toggle overrideFacilityHours = true → booking allows any time slots (subject to maxConcurrent, breaks, etc.).

Please implement these changes, run migrations, and verify both the internal and external booking flows now drive exclusively off facility‑level hours with an optional override flag on types.”