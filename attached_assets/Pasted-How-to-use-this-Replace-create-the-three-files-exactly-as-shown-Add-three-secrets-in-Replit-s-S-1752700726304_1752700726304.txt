How to use this

Replace / create the three files exactly as shown.

Add three secrets in Replit’s Secrets tab (DOPPLER_TOKEN, DOPPLER_PROJECT, DOPPLER_CONFIG=dev).

Hit Run – the workspace will build, Doppler will inject DATABASE_URL, REDIS_URL, etc., and the app will hot-reload without crashing.

1️⃣ replit.nix (new file, replace if it exists)
nix
Copy
Edit
{ pkgs }:

{
  # Packages Replit will pre-install in the VM
  deps = [
    pkgs.nodejs_20    # Node 20.x (matches engines field)
    pkgs.pnpm         # pnpm CLI
    pkgs.doppler      # Doppler CLI (in nixpkgs ≥23.11)  :contentReference[oaicite:0]{index=0}
    pkgs.git
  ];
}
Replit rebuilds the Nix layer automatically after you save.

2️⃣ .replit (overwrite completely)
toml
Copy
Edit
# .replit
language = "nodejs"
run = "doppler run --config dev -- pnpm run dev"   # inject secrets then start dev loop
hidden = [".pnpm", ".local", "node_modules", "dist"]
doppler run --config dev injects the dev config for the project into every child process 🡒 both the server (TSX) and client (Vite) see identical env vars. 
Doppler

hidden keeps the big directories out of the Replit file-tree UI.

3️⃣ package.json (scripts block only)
jsonc
Copy
Edit
{
  // …
  "scripts": {
    /* Top-level dev command ------------------------------------------------ */
    // This is what .replit calls
    "dev": "concurrently -k -n server,client -c green,cyan \"npm run dev:server\" \"npm run dev:client\"",

    /* Server hot-reload ---------------------------------------------------- */
    // tsx watch with glob-excludes to dodge the inotify limit
    "dev:server": "tsx watch --exclude '.pnpm/**' --exclude '.local/**' --exclude 'node_modules/**' -r dotenv/config server/index.ts",

    /* Front-end hot-reload ------------------------------------------------- */
    "dev:client": "vite",

    /* Doppler wrapper (optional local use) --------------------------------- */
    "dev:doppler": "doppler run --config dev -- pnpm run dev",

    /* --- prod / lint / tests unchanged --- */
    "build": "vite build && tsc -p tsconfig.build.json",
    "start": "NODE_ENV=production node dist/index.js",
    "lint": "eslint . --ext .js,.mjs,.cjs,.ts,.tsx",
    "test": "vitest"
  }
}
Nothing else in package.json changes.

4️⃣ vite.config.ts (only the server.watch stanza changed)
ts
Copy
Edit
/* --- keep your existing imports & plugin loader --- */

export default defineConfig(/* ..existing async callback.. */ () => ({
  // …plugins, resolve, root, build…

  server: {
    host: "0.0.0.0",
    port: 5173,
    hmr: Boolean(process.env.REPL_ID)
      ? { protocol: "wss", host: new URL(import.meta.url).hostname, port: 443 }
      : true,

    // <- add this block (matches TSX exclusions)
    watch: {
      ignored: ["**/.pnpm/**", "**/.local/**", "**/node_modules/**"]
    }
  }
}));
server.watch.ignored tells Vite’s chokidar watcher to skip the massive pnpm store and Python libs, eliminating the ENOSPC crash. 
NixOS Search

5️⃣ Replit Secrets (tab on the left)
Name	Value	Note
DOPPLER_TOKEN	your Doppler service token	Read-only is fine 
Doppler
DOPPLER_PROJECT	dock-optimizer	whatever your project is called
DOPPLER_CONFIG	dev	matches the --config dev flag

Doppler CLI resolves these automatically—no doppler setup needed. If you do want to bind the workspace once and forget, open the Shell and run:

bash
Copy
Edit
doppler setup --no-interactive --token $DOPPLER_TOKEN \
  --project $DOPPLER_PROJECT --config $DOPPLER_CONFIG
What happens when you press Run
Replit’s build step installs Nix deps (nodejs, pnpm, doppler).

.replit executes:

bash
Copy
Edit
doppler run --config dev -- pnpm run dev
Doppler CLI fetches secrets and injects them into the env.

pnpm run dev starts concurrently →

Server: tsx watch … (ignores heavy dirs, no ENOSPC)

Client: vite (same ignore list)

Both processes share the same DATABASE_URL, REDIS_URL, SESSION_SECRET, etc.

Hot-reload works; the console shows:

csharp
Copy
Edit
[server] 🔧 Development server ready!
[client]  ➜  Local: http://localhost:5173/
Launch-ready every time—no local .env required.