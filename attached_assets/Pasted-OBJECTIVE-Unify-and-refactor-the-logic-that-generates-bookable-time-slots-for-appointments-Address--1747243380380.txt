OBJECTIVE
Unify and refactor the logic that generates bookable time slots for appointments. Address current hardcoded assumptions by:

Dynamically sourcing open/close times from either org.hours or facility.hours.

Skipping breaks where configured.

Introducing programmatic controls for:

Slot interval (default: 30 minutes)

Booking buffer time (default: 60 minutes ahead of now)

Max advance booking window (default: 30 days ahead)

Supporting both internal and external flows via shared utilities.

üìÅ FILE: server/services/availability.ts
‚úÖ 1. Add Config Interfaces & Defaults
ts
Copy
Edit
export interface SchedulingConfig {
  intervalMinutes: number;        // e.g. 30
  bookingBufferMinutes: number;  // e.g. 60 (no same-hour bookings)
  maxAdvanceDays: number;        // e.g. 30
}

const defaultConfig: SchedulingConfig = {
  intervalMinutes: 30,
  bookingBufferMinutes: 60,
  maxAdvanceDays: 30,
};
‚úÖ 2. Update Slot Generator with Buffer and Lookahead
ts
Copy
Edit
import { parse, isAfter, addMinutes, format, differenceInCalendarDays } from 'date-fns';

interface DayHours {
  open: boolean;
  start: string;
  end: string;
  breakStart?: string;
  breakEnd?: string;
}

interface AvailabilityContext {
  orgHours: Record<string, DayHours>;
  facilityHours?: Record<string, DayHours>;
  facilityOverrides: boolean;
}

function getEffectiveHours(day: string, ctx: AvailabilityContext): DayHours | null {
  if (ctx.facilityOverrides && ctx.facilityHours?.[day]?.open) {
    return ctx.facilityHours[day];
  }
  if (ctx.orgHours?.[day]?.open) {
    return ctx.orgHours[day];
  }
  return null;
}

function generateTimeSlots(
  hours: DayHours,
  baseDate: Date,
  config: SchedulingConfig
): string[] {
  const slots: string[] = [];
  const start = parse(hours.start, 'HH:mm', baseDate);
  const end = parse(hours.end, 'HH:mm', baseDate);
  const breakStart = hours.breakStart ? parse(hours.breakStart, 'HH:mm', baseDate) : null;
  const breakEnd = hours.breakEnd ? parse(hours.breakEnd, 'HH:mm', baseDate) : null;

  const bufferCutoff = addMinutes(new Date(), config.bookingBufferMinutes);

  let current = start;
  while (!isAfter(current, end)) {
    const inBreak = breakStart && breakEnd && current >= breakStart && current < breakEnd;
    const afterBuffer = isAfter(current, bufferCutoff);
    if (!inBreak && afterBuffer) {
      slots.push(format(current, 'HH:mm'));
    }
    current = addMinutes(current, config.intervalMinutes);
  }

  return slots;
}
‚úÖ 3. Expose Slot Generator Entry Point
ts
Copy
Edit
export function getAvailableTimeSlotsForDay(
  date: Date,
  ctx: AvailabilityContext,
  config?: Partial<SchedulingConfig>
): string[] {
  const day = date.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
  const mergedConfig = { ...defaultConfig, ...config };

  const today = new Date();
  if (differenceInCalendarDays(date, today) > mergedConfig.maxAdvanceDays) return [];

  const hours = getEffectiveHours(day, ctx);
  if (!hours) return [];

  return generateTimeSlots(hours, date, mergedConfig);
}
üìÅ FILE: server/controllers/appointments.ts
‚úÖ 4. Use It in Your Booking Availability Endpoint
ts
Copy
Edit
const slots = getAvailableTimeSlotsForDay(
  new Date(request.query.date),
  {
    orgHours,
    facilityHours,
    facilityOverrides: facility.overrides === true,
  },
  {
    intervalMinutes: 30,
    bookingBufferMinutes: 60,
    maxAdvanceDays: 30,
  }
);

res.json({
  slots: slots.map(time => ({
    time,
    display: format(parse(time, 'HH:mm', new Date()), 'h:mm a'),
  })),
});
üìÅ FILE: client/src/pages/facility-hours.tsx
‚úÖ 5. Fix Phantom Values in UI
When open === false, clear or disable the fields for start, end, breakStart, breakEnd.

Optional: reset state to null/"" on toggle.

‚úÖ ACCEPTANCE CRITERIA
Time slot availability is now fully driven by config + org/facility hours.

No hardcoded assumptions in code (interval, buffer, lookahead).

Logic is reusable and centralized in services/availability.ts.

Phantom data no longer appears in admin UI when facility hours are disabled.

Can easily override intervalMinutes or buffer globally or per-org in the future.

