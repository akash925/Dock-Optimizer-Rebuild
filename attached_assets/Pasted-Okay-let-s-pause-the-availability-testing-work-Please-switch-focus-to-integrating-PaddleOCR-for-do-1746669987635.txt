Okay, let's pause the availability testing work. Please switch focus to integrating PaddleOCR for document processing on the backend.

**Goal:** Set up PaddleOCR using its Python package and create a basic Node.js API endpoint to process uploaded images.

**Approach:**
1.  Install necessary Python dependencies (`paddleocr`, `paddlepaddle`) within the Replit environment, potentially using `replit.nix` and `pip` or `poetry`.
2.  Create a simple Python script that uses the `paddleocr` library to perform OCR on an image file path passed as an argument and prints the results as JSON to standard output.
3.  Create a new Node.js API endpoint in `server/routes.ts` that uses `multer` to accept an image upload.
4.  This Node.js endpoint will call the Python script using `child_process`, capture its JSON output, and return it to the client.

**Tasks:**

1.  **Environment Setup & Dependency Installation:**
    * Determine the correct way to install Python packages in this Replit environment. Check for existing `replit.nix`, `requirements.txt`, or `pyproject.toml`.
    * Add `paddleocr` and `paddlepaddle` (CPU version is likely sufficient for Replit, e.g., `paddlepaddle`) to the appropriate Python dependency file.
    * Update `replit.nix` if necessary to ensure Python and required system libraries (like `opencv-python-headless` often needed by OCR tools) are available.
    * Provide the commands to install these dependencies (e.g., `pip install -r requirements.txt` or `poetry install`).

2.  **Create Python OCR Script:**
    * Create a new file: `server/src/services/ocr_processor.py`
    * Implement a Python script in this file that:
        * Imports `PaddleOCR` from `paddleocr`.
        * Imports `sys` and `json`.
        * Takes one command-line argument: the path to the image file.
        * Initializes `PaddleOCR` (e.g., `PaddleOCR(use_angle_cls=True, lang='en')`). This might download models on first run.
        * Calls the `ocr` method on the image path.
        * Prints the result (which is usually a list of detected text lines/boxes) to standard output **as a JSON string** (using `json.dumps`).
        * Include basic error handling (e.g., for file not found or OCR errors).

3.  **Create Node.js API Endpoint & Service:**
    * **Multer Setup (in `server/routes.ts` or a helper file):** Configure a new `multer` instance specifically for OCR uploads.
        * Create a destination directory if it doesn't exist, e.g., `uploads/ocr-docs`.
        * Use `multer.diskStorage` similar to the existing `checkoutPhotoStorage` (Source: 3512), but save files to the new directory with a unique temporary name.
    * **Route Definition (in `server/routes.ts`):**
        * Add a new route: `POST /api/ocr/process-document`.
        * Apply the `isAuthenticated` middleware.
        * Apply the new OCR `multer` middleware (e.g., `uploadOcr.single('document')` where `'document'` is the expected field name from the frontend).
        * Link the route to a new controller function (e.g., `handleProcessDocument`).
    * **Controller/Service Logic (e.g., in a new `server/src/controllers/ocr-controller.ts`):**
        * Create the `handleProcessDocument` async function.
        * Check if `req.file` exists (upload successful). If not, return an error.
        * Get the path of the uploaded file: `req.file.path`.
        * Use Node.js `child_process.spawn` to execute the Python script (`python3 server/src/services/ocr_processor.py <image_path>`).
        * Capture `stdout` from the Python script.
        * Capture `stderr` for error handling.
        * When the Python script exits:
            * If exit code is 0 and `stdout` has data, parse the captured `stdout` data as JSON.
            * Send the parsed JSON data back in the Express response (`res.json(...)`).
            * If there were errors (`stderr` or non-zero exit code), log them and send an appropriate error response (e.g., 500 status).
        * **(Optional but Recommended):** Delete the temporary uploaded file (`fs.unlink`) after processing.

**Output:**
Please provide:
a.  Any necessary modifications to `replit.nix`.
b.  The content for the Python dependency file (`requirements.txt` or `pyproject.toml`).
c.  The full code for the new Python script `server/src/services/ocr_processor.py`.
d.  The code for the new `multer` setup for OCR uploads.
e.  The code for the new route definition in `server/routes.ts`.
f.  The full code for the new controller function `handleProcessDocument` (potentially in a new `ocr-controller.ts` file).