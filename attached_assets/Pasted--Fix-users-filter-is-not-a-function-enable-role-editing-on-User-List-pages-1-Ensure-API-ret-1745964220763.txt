# Fix “users.filter is not a function” & enable role‐editing on User/List pages

1. **Ensure API returns raw arrays**  
   - In **`client/src/api/admin.ts`**, update `getUsers` so it returns the array, not the full response object:
     ```ts
     export const getUsers = () =>
       axios.get('/admin/users').then(res => res.data /* assume res.data is the array */);
     ```
   - Do the same for `getAllRoles` and `getOrgs` if they wrap the array in another field.

2. **Guard against non-array and destructure properly**  
   - In **`client/src/pages/admin/users.tsx`**, change:
     ```ts
     const { data: users } = useQuery('users', api.admin.getUsers);
     ```
     to:
     ```ts
     const { data, isLoading } = useQuery('users', api.admin.getUsers);
     const users = Array.isArray(data) ? data : [];
     ```
   - Then use `users.filter(...)` safely.

3. **Fix Add-User-to-Org modal user list**  
   - In **`client/src/pages/admin/orgs/[orgId].tsx`**, in the “Add User to Organization” modal, do the same:
     ```ts
     const { data: allUsersRaw } = useQuery('users', api.admin.getUsers);
     const allUsers = Array.isArray(allUsersRaw) ? allUsersRaw : [];
     ```
   - Map `allUsers` into `<SelectItem>`s.

4. **Wire Role dropdown properly**  
   - Fetch roles once:
     ```ts
     const { data: rolesRaw } = useQuery('roles', api.admin.getAllRoles);
     const roles = Array.isArray(rolesRaw) ? rolesRaw : [];
     ```
   - In both **Edit User** and **Add User to Org** forms, replace the hard-coded `<SelectItem>`s with:
     ```jsx
     {roles.map(r => (
       <SelectItem key={r.name} value={r.name}>
         {r.name.replace('-', ' ')}
       </SelectItem>
     ))}
     ```

5. **Confirm org-specific users list**  
   - When rendering **Organization Users** tab, use the `members` array from your `getOrgDetail` response:
     ```ts
     const { data: orgDetail } = useQuery(['orgDetail', orgId], () => api.admin.getOrgDetail(orgId));
     const orgUsers = Array.isArray(orgDetail?.members) ? orgDetail.members : [];
     ```
   - Render `orgUsers.map(...)` to show Name, Email, Role and the Remove icon.

6. **Invalidate & refetch on changes**  
   - After any PUT/DELETE (add/remove user, change role), call:
     ```ts
     queryClient.invalidateQueries('users');
     queryClient.invalidateQueries(['orgDetail', orgId]);
     ```

---

Drop this in to correct your array‐vs‐object mismatch, restore full search & mapping, and surface the new roles dropdowns in both the global Users list and the Organization Users modal.```
