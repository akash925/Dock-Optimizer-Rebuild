Continue implementing the `calculateAvailabilitySlots` function in `server/src/services/availabilityService.ts`.

**Existing Code Context:**
Assume the following exist in the same scope/file or are imported:
- The function signature: `export async function calculateAvailabilitySlots(db: DrizzleDBInstance, storage: IStorage, date: string, facilityId: number, appointmentTypeId: number, effectiveTenantId: number): Promise<AvailabilitySlot[]>`
- The function `WorkspaceRelevantAppointmentsForDay` (as generated previously).
- The `storage` instance (type `IStorage`).
- Relevant schema types (`Facility`, `AppointmentType`) from `@shared/schema`.
- The `AvailabilitySlot` interface definition.
- Your actual Drizzle DB instance type instead of `DrizzleDBInstance`.

**Task:**
Implement the initial steps within the `calculateAvailabilitySlots` function body:

1.  **Import necessary functions from `date-fns-tz`**: Specifically `zonedTimeToUtc` and `utcToZonedTime`. Also import `getDay` from `date-fns`.
2.  **Fetch Core Data**:
    * Call `storage.getFacility(facilityId, effectiveTenantId)`. Store in `facility`. If `!facility`, throw a new `Error('Facility not found or access denied.')`.
    * Call `storage.getAppointmentType(appointmentTypeId, effectiveTenantId)`. Store in `appointmentType`. If `!appointmentType`, throw a new `Error('Appointment type not found or access denied.')`.
3.  **Determine Operating Rules**:
    * Get `facilityTimezone` from `facility.timezone`, defaulting to 'America/New_York'.
    * Calculate `dayOfWeek` (0-6) for the input `date` string by converting the date to the `facilityTimezone` first using `utcToZonedTime` (assuming input `date` string represents midnight UTC of the target day, which might need adjustment) and then using `getDay`.
    * Create variables `operatingStartTime`, `operatingEndTime` (strings "HH:MM"), and `isOpen` (boolean).
    * Check if `appointmentType.overrideFacilityHours` is true. If yes, set `operatingStartTime = "00:00"`, `operatingEndTime = "23:59"`, `isOpen = true`.
    * If `overrideFacilityHours` is false, use a switch statement on `dayOfWeek` to get the correct `facility.[dayName]Start`, `facility.[dayName]End`, and `facility.[dayName]Open` values and assign them to `operatingStartTime`, `operatingEndTime`, and `isOpen`.
    * If `!isOpen`, immediately return `[]`.
    * Calculate `slotIntervalMinutes`: Use `appointmentType.bufferTime` if it's a positive number, otherwise use `appointmentType.duration`. Ensure a minimum value (e.g., 15 minutes).
4.  **Calculate Timezone-Aware Date Boundaries**:
    * Calculate `dayStart` (JavaScript `Date` object). This should represent exactly 00:00:00 on the input `date` *in the `facilityTimezone`*. Use `zonedTimeToUtc` to achieve this. Example: `zonedTimeToUtc(\`${date}T00:00:00\`, facilityTimezone)`.
    * Calculate `dayEnd` (JavaScript `Date` object). This should represent exactly 00:00:00 on the *day after* the input `date` *in the `facilityTimezone`*. Add 1 day to `dayStart` *before* converting with `zonedTimeToUtc`, or calculate it similarly.

**Output:**
Generate the TypeScript code implementing these steps 1-4 inside the `calculateAvailabilitySlots` function. Include necessary imports and comments explaining the logic, especially the timezone handling. Stop before calling `WorkspaceRelevantAppointmentsForDay`.